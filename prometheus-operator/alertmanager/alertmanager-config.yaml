apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-main
  namespace: monitoring
data:
  alertmanager.yaml: Z2xvYmFsOg0KICAjIFJlc29sdmVUaW1lb3V0IGlzIHRoZSB0aW1lIGFmdGVyIHdoaWNoIGFuIGFsZXJ0IGlzIGRlY2xhcmVkIHJlc29sdmVkDQogICMgaWYgaXQgaGFzIG5vdCBiZWVuIHVwZGF0ZWQuDQogIHJlc29sdmVfdGltZW91dDogNW0NCg0KICAjIFRoZSBzbWFydGhvc3QgYW5kIFNNVFAgc2VuZGVyIHVzZWQgZm9yIG1haWwgbm90aWZpY2F0aW9ucy4NCiAgc210cF9zbWFydGhvc3Q6ICdzbXRwLnBhcnRuZXIub3V0bG9vay5jbjo1ODcnDQogIHNtdHBfZnJvbTogJ25vcmVwbHktbm90aWYtMkBkaWFucm9uZy5jb20nDQogIHNtdHBfYXV0aF91c2VybmFtZTogJ25vcmVwbHktbm90aWYtMkBkaWFucm9uZy5jb20nDQogIHNtdHBfYXV0aF9wYXNzd29yZDogJzVJazJXV3k4T0x0NicNCiAgIyBUaGUgQVBJIFVSTCB0byB1c2UgZm9yIFNsYWNrIG5vdGlmaWNhdGlvbnMuDQogIHNsYWNrX2FwaV91cmw6ICdodHRwczovL2hvb2tzLnNsYWNrLmNvbS9zZXJ2aWNlcy9zb21lL2FwaS90b2tlbicNCg0KIyAjIFRoZSBkaXJlY3RvcnkgZnJvbSB3aGljaCBub3RpZmljYXRpb24gdGVtcGxhdGVzIGFyZSByZWFkLg0KdGVtcGxhdGVzOg0KLSAnKi50bXBsJw0KDQojIFRoZSByb290IHJvdXRlIG9uIHdoaWNoIGVhY2ggaW5jb21pbmcgYWxlcnQgZW50ZXJzLg0Kcm91dGU6DQoNCiAgIyBUaGUgbGFiZWxzIGJ5IHdoaWNoIGluY29taW5nIGFsZXJ0cyBhcmUgZ3JvdXBlZCB0b2dldGhlci4gRm9yIGV4YW1wbGUsDQogICMgbXVsdGlwbGUgYWxlcnRzIGNvbWluZyBpbiBmb3IgY2x1c3Rlcj1BIGFuZCBhbGVydG5hbWU9TGF0ZW5jeUhpZ2ggd291bGQNCiAgIyBiZSBiYXRjaGVkIGludG8gYSBzaW5nbGUgZ3JvdXAuDQoNCiAgZ3JvdXBfYnk6IFsnYWxlcnRuYW1lJywgJ2NsdXN0ZXInLCAnc2VydmljZSddDQoNCiAgIyBXaGVuIGEgbmV3IGdyb3VwIG9mIGFsZXJ0cyBpcyBjcmVhdGVkIGJ5IGFuIGluY29taW5nIGFsZXJ0LCB3YWl0IGF0DQogICMgbGVhc3QgJ2dyb3VwX3dhaXQnIHRvIHNlbmQgdGhlIGluaXRpYWwgbm90aWZpY2F0aW9uLg0KICAjIFRoaXMgd2F5IGVuc3VyZXMgdGhhdCB5b3UgZ2V0IG11bHRpcGxlIGFsZXJ0cyBmb3IgdGhlIHNhbWUgZ3JvdXAgdGhhdCBzdGFydA0KICAjIGZpcmluZyBzaG9ydGx5IGFmdGVyIGFub3RoZXIgYXJlIGJhdGNoZWQgdG9nZXRoZXIgb24gdGhlIGZpcnN0DQogICMgbm90aWZpY2F0aW9uLg0KDQogIGdyb3VwX3dhaXQ6IDMwcw0KDQogICMgV2hlbiB0aGUgZmlyc3Qgbm90aWZpY2F0aW9uIHdhcyBzZW50LCB3YWl0ICdncm91cF9pbnRlcnZhbCcgdG8gc2VuZCBhIGJhdGNoDQogICMgb2YgbmV3IGFsZXJ0cyB0aGF0IHN0YXJ0ZWQgZmlyaW5nIGZvciB0aGF0IGdyb3VwLg0KDQogIGdyb3VwX2ludGVydmFsOiA1bQ0KDQogICMgSWYgYW4gYWxlcnQgaGFzIHN1Y2Nlc3NmdWxseSBiZWVuIHNlbnQsIHdhaXQgJ3JlcGVhdF9pbnRlcnZhbCcgdG8NCiAgIyByZXNlbmQgdGhlbS4NCg0KICAjcmVwZWF0X2ludGVydmFsOiAxbQ0KICByZXBlYXRfaW50ZXJ2YWw6IDE1bQ0KDQogICMgQSBkZWZhdWx0IHJlY2VpdmVyDQoNCiAgIyBJZiBhbiBhbGVydCBpc24ndCBjYXVnaHQgYnkgYSByb3V0ZSwgc2VuZCBpdCB0byBkZWZhdWx0Lg0KICByZWNlaXZlcjogZGVmYXVsdA0KDQogICMgQWxsIHRoZSBhYm92ZSBhdHRyaWJ1dGVzIGFyZSBpbmhlcml0ZWQgYnkgYWxsIGNoaWxkIHJvdXRlcyBhbmQgY2FuDQogICMgb3ZlcndyaXR0ZW4gb24gZWFjaC4NCg0KICAjIFRoZSBjaGlsZCByb3V0ZSB0cmVlcy4NCiAgcm91dGVzOg0KICAjIFNlbmQgc2V2ZXJpdHk9c2xhY2sgYWxlcnRzIHRvIHNsYWNrLg0KICAtIG1hdGNoOg0KICAgICAgc2V2ZXJpdHk6IHdhcmluZw0KICAgIHJlY2VpdmVyOiAncXFfZW1haWwnDQogIC0gbWF0Y2g6DQogICAgICBzZXZlcml0eTogZW1haWwNCiAgICByZWNlaXZlcjogZW1haWxfYWxlcnQNCg0KcmVjZWl2ZXJzOg0KLSBuYW1lOiAnZGVmYXVsdCcNCiAgZW1haWxfY29uZmlnczogDQogIC0gdG8gOiAneWkuaHVAZGlhbnJvbmcuY29tJw0KICAgIHNlbmRfcmVzb2x2ZWQ6IHRydWUNCg0KLSBuYW1lOiAnZW1haWxfYWxlcnQnDQogIGVtYWlsX2NvbmZpZ3M6IA0KICAtIHRvIDogJ3lpLmh1QGRpYW5yb25nLmNvbScNCiAgICBzZW5kX3Jlc29sdmVkOiB0cnVlDQotIG5hbWU6ICdxcV9lbWFpbCcNCiAgZW1haWxfY29uZmlnczogDQogIC0gdG8gOiAnMzQ1MjcwMDE2QHFxLmNvbScNCiAgICBzZW5kX3Jlc29sdmVkOiB0cnVlDQo=
  default.tmpl: 
